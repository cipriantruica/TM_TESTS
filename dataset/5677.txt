From: iop@server2.iie.ncku.edu.tw Subject: Program WM_PROTOCOLS in OPEN LOOK toolkit.....  Hi, all:     I am studying the book -->  UNIX Desktop Guide to OPEN LOOK . There is an example --> winprop.c that demonstrate how to program WM_PROTOCOLS property in chapter 8.  It can run, but only show the static text messages, no Notice pop_up. What is the problem? \t    Thanks in advance for help!!1\t    IOP /*-------------------------------------------------------------*/ /*  File:  winprop.c  *  *  Shows how to set properties on a window.  *  */   \t/* For definition of XA_ATOM */                   /* This file defines the atoms with _OL_ prefix */ /* ID of the top-level and NoticeShell widget */ static Widget top_level, notice_shell; static Widget make_notice(); static char message[] =  Clients use properties to communicate   with the window manager. This example illustrates how an OPEN   LOOK application requests notification from the window manager   when certain events occur. The communication is in the form of   a ClientMessage event that the application processes in an   event-handler. ; /* Atoms used for inter-client communication */ Atom ATOM_WM_PROTOCOLS, ATOM_WM_DELETE_WINDOW,      ATOM_WM_SAVE_YOURSELF; static void handle_wm_messages(); static void save_and_exit(); static void save_yourself(); static void pop_notice(); static void do_exit(); /* String to hold comand line (for use in responding to  * the WM_SAVE_YOURSELF protocol message.  */ char saved_cmdline[128]; /*-------------------------------------------------------------*/ void main(argc, argv) int  argc; char **argv; {     Widget w;     int i; /* Save the command-line for use in responding to the  * WM_SAVE_YOURSELF protocol message.  */     sprintf(saved_cmdline,  %s  , argv[0]);     if(argc > 1) \tfor(i = 1; i type == ClientMessage &&        p_event->xclient.message_type == ATOM_WM_PROTOCOLS)     { \tif(p_event->xclient.data.l[0] == ATOM_WM_DELETE_WINDOW) \t{ \t\tsave_and_exit(); \t} \tif(p_event->xclient.data.l[0] == ATOM_WM_SAVE_YOURSELF) \t{ \t\tsave_yourself(); \t}     } } /*-------------------------------------------------------------*/ static void save_and_exit() { /* Display a notice giving the user a chance to respond */     pop_notice(top_level, notice_shell); } /*-------------------------------------------------------------*/ static void save_yourself() { /* Set the WM_COMMAND property to the saved command-line. */     XChangeProperty(XtDisplay(top_level), XtWindow(top_level), \t\t    XA_WM_COMMAND, XA_STRING, 8, \t\t    PropModeReplace, saved_cmdline, \t\t    strlen(saved_cmdline) + 1); } /*-------------------------------------------------------------*/ static Widget make_notice(parent) Widget parent; {     Widget w, n_text, n_control, n_exit, n_cancel; /* Create a button and provide a callback to pop up a Notice */     w = XtVaCreateManagedWidget( QuitButton , \t\t      oblongButtonWidgetClass, parent, \t\t      XtNlabel,     Exit... , \t\t      NULL);     XtAddCallback(w, XtNselect, pop_notice, NULL); /* Create the NoticeShell widget. Note that you have to use  * XtVaCreatePopupShell instead of the usual  * XtVaCreateManagedWidget.  */     notice_shell = XtVaCreatePopupShell( QuitNotice , \t\t      noticeShellWidgetClass, w, \t\t      NULL); /* Get the ID of the text and control area widgets of the  * NoticeShell.  */     XtVaGetValues(notice_shell, \t\t  XtNtextArea,\t      &n_text, \t\t  XtNcontrolArea,     &n_control, \t\t  NULL); /* Place a message in the text area of the NoticeShell */     XtVaSetValues(n_text, \t    XtNstring,  Please confirm exit from program. , \t    NULL); /* Add buttons to the control area of the NoticeShell.  * Each button has an appropriate callback.  */     n_exit = XtVaCreateManagedWidget( NoticeExit , \t\t      oblongButtonWidgetClass, n_control, \t\t      XtNlabel,     Exit , \t\t      NULL);     XtAddCallback(n_exit, XtNselect, do_exit, NULL);     n_cancel = XtVaCreateManagedWidget( NoticeCancel , \t\t      oblongButtonWidgetClass, n_control, \t\t      XtNlabel,     Cancel , \t\t      XtNdefault,  True, \t\t      NULL);     return w; } /*-------------------------------------------------------------*/ static void pop_notice(w_emanate, w_notice) Widget\t  w_emanate, w_notice; {     XtVaSetValues(w_notice, XtNemanateWidget, w_emanate, NULL); /* Pop up the NoticeShell widget. The NoticeShell widget makes  * sure that the aplication waits until the user selects from  * one of the buttons in the NoticeShell is control area.  */     XtPopup(w_notice, XtGrabExclusive); } /*-------------------------------------------------------------*/ static void do_exit(w, call_data, client_data) Widget\t  w; XtPointer call_data, client_data; {     XCloseDisplay(XtDisplay(w));     exit(0); } 