From: broehl@sunee.uwaterloo.ca (Bernie Roehl) Subject: Re: Optimizing projections  In article  LIONESS@ufcc.ufl.edu writes: >My three-d library does a lot of projections ( duh ), but currently it >is projecting an object is vertices on a _per triangle basis_.  This is >grossly inefficient for 99% of the objects displayed ( which can >be optimized by doing projections ONE time, once for each vertex ), but >objects whose Z-extents intersect the hither plane cannot benefit from >this because new vertices must be created during Z-clipping.  >Anyone have any better ideas?  Yes.  Here is what you should do.  Keep the vertices in an array, and have the polygons (triangles are okay, but n-sided polygons are slightly more efficient) store the indices into the array of the vertices that comprise them.  You set a flag for each vertex when you transform it, so you do not have to transform any vertex more than once; you also do backface elimination before processing the polygon, so that vertices that belong only to bacfacing polys do not have to be transformed at all.  Whenever you transform a vertex, check if it is on the far side of the hither plane; if it is, you can project it right away and store the result.  Then do your Z clip; any vertices that get produced will have to have their projection done at that stage.  --  \tBernie Roehl         University of Waterloo Dept of Electrical and Computer Engineering \tMail: broehl@sunee.UWaterloo.ca \tVoice:  (519) 885-1211 x 2607 [work] 