From: rbrand@usasoc.soc.mil (Raymond S. Brand) Subject: Re: Clipper considered harmful  In article , smb@research.att.com (Steven Bellovin) writes: [...] > There are three issues with Clipper.  The first is whether or not the > architecture of the whole scheme is capable of working.  My answer, > with one significant exception, is yes.  I really do think that NSA and > NIST have designed this scheme about as well as can be, assuming that > their real objectives are as stated: to permit wiretapping, under > certain carefully-controlled circumstances, with a minimum risk of > abuse.  (The exception is that U exists outside of the chip, on a > programming diskette.  that is seriously wrong.  U_1 and U_2 should be > loaded onto the chip separately.)  To those who disagree (and I do not > claim my answer is obvious, though I found my own reasoning > sufficiently persuasive that I was forced to rewrite the Conclusions > section of my technical analysis paper -- I had originally blasted the > scheme), I issue this invitation:  assume that you were charged with > implementing such a system, with complete regard for civil rights and > due process.  What would you do differently?  In answering this > question, please accept NSA is fundamental assumptions:  that both > strong cryptography against outsiders, and the ability to wiretap > *some* domestic users, is necessary.  (If you feel it necessary to > challenge those assumptions, do it in the context of the last issue I > present below.  Right here, i am discussing *just* the technical > aspects.  And no, I do not by any means claim that just because > something can be done, it should be.)  OK Steve, here is a sketch of an alternative that I believe addresses most of the objections to the Clipper scheme.  Notation: \t+\tconcatenation \t^\texclusive or \tE(M,K)\tmessage M encrypted by key K \tD(M,K)\tmessage M decrypted by key K \tH(M)\thash (digest/signature) of message M  Important Values: \tU0[X]\t\tlocal chip unit key from escrow agency X \tU1[X]\t\tremote chip unit key from escrow agency X \tN[0]\t\tserial number of the local chip \tN[1]\t\tserial number of the remote chip \tA\t\tnumber of escrow agencies \tK[0],K[1]\t session keys  agreed upon external to this protocol \tF\t\t family key , need not be secret  Protocol: \tChoose K0[1],...K0[A] such that K[0] = K0[1]^...^K0[A] \tRemote chip does same for K[1],K1[1],...,K1[A].  \tCompute the following:  \t\tL0[1] = E(K0[1], U0[1]) \t\t... \t\tL0[A] = E(K0[A], U0[A])  \t\tL[0] = N[0] + E(N[0] + L0[1] + ... + L0[A], F)  \t\tRemote chip does the same for L1[1],...,L1[A],L[1]  \tSend L[0] to remote chip and receive L[1] from remote chip  \tCompute:  \t\tKE[0] = H(K[0] + N[0] + L0[1] + ... + L0[A] \t\t\t+ K[1] + D(L[1], F)  \t\tKD[0] = H(K[1] + D(L[1], F) \t\t\t+ K[0] + N[0] + L0[1] + ... + L0[A]  \t\tNote that D(L[1], F) = N[1] + L1[1] + ... + L1[A]  \t\tRemote chip does the same for KE[1] and KD[1]  \tUser data is encrypted (decrypted) with keys KE[0], KE[1] \t\t(KD[0], KD[1])  Assumptions: \tNo trap doors in E(), D() and H(). H() is not invertible.  \tAlgorithms for E(), D() and H() are secret. Otherwise a software \timplementation (bogus chip) could communicate with a real chip.  \tThe chip only supports the following operation:  \t\t1)  Return N[0] \t\t2)  Load K0[x] \t\t3)  Return E(K0[x], U0[x]) \t\t4)  Return E(N[0] + L0[1] + ... + L0[A], F) \t\t5)  Given E(N[1] + L1[1] + ... + L1[A], F), \t\t\treturn N[1],L1[1],...,L1[A] \t\t6)  Load K[1] \t\t7)  Given E(N[1] + L1[1] + ... + L1[A], F), \t\t\tcompute KE[0], KD[0] \t\t8)  Given M, return E(M, KE[0]) \t\t9)  Given M, return D(M, KD[0])  \tAnything programmed into the chip can be determined by destroying \tthe chip (U[1],...,U[A],F,N[0]).  \tU[1],...,U[A] can not be determined except by destroying the chip. \t(Unfortunately this may not be true in reality. I suppose it is \tpossible to determine how a chip has been programmed with a \tsophisticated[sp?] x-ray machine to look for blown fuses.)  \tThe U is are programmed independantly by the escrow agencies.  Notes: \tFor tapping escrow agency Y is given N[0], E(K0[Y], U0[Y]), N[1], \tE(K1[Y], U1[Y]) and returns K0[Y], K1[Y].  \tLEA is must contact all escrow agencies with the serial numbers from \tboth chips and the encrypted partial keys. This allows the agencies \tto record that both chips were tapped.  \tLEA is only get the session key, not the key to all conversations \tof a particular chip. This precludes real-time decrypting of a \tconversation but that is not one of the STATED requirements.  Observation: \tIn order for any secure by  tap-able  communication scheme to work, \tthe active parts need to share a secret. And if this secret is \trevealed, communications by those that know the secret can be made \t un-tap-able . Obvious candidates are the cryptographic algorithm \tand the master (family) key. Relative size and complexity suggests \tthat the key can be obtained from a silicon implementation of the \tscheme a LOT easier and faster than the algorithm.   \t\t\t\t\t\trsbx  ----------------------------------------------------------------------------- Raymond S. Brand\t\t\t\t\trbrand@usasoc.soc.mil ----------------------------------------------------------------------------- 